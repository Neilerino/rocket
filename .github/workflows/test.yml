name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest

    # Service containers for PostgreSQL (used for unit tests if needed)
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'backend/go.mod'
          cache-dependency-path: 'backend/go.sum'

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Verify dependencies
        working-directory: ./backend
        run: go mod verify

      - name: Run unit tests
        working-directory: ./backend
        run: |
          echo "Running unit tests (excluding integration tests)..."
          go test -v -race -coverprofile=coverage.out ./... -timeout=10m \
            -skip="TestIntegrationSuite" \
            -covermode=atomic

      - name: Run integration tests
        working-directory: ./backend
        run: |
          echo "Running integration tests with testcontainers..."
          go test -v -race ./tests/integration -timeout=15m

      - name: Generate coverage report
        working-directory: ./backend
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.out
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            backend/coverage.out
            backend/coverage.html

  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'backend/go.mod'
          cache-dependency-path: 'backend/go.sum'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: backend
          args: --timeout=5m

  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'backend/go.mod'
          cache-dependency-path: 'backend/go.sum'

      - name: Build application
        working-directory: ./backend
        run: |
          echo "Building backend application..."
          go build -v -ldflags="-w -s" -o bin/rocket ./cmd/server.go
          
      - name: Test binary
        working-directory: ./backend
        run: |
          echo "Testing that binary was built successfully..."
          ls -la bin/
          file bin/rocket