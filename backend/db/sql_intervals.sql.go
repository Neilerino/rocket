// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sql_intervals.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const planIntervals_CreateOne = `-- name: PlanIntervals_CreateOne :one
INSERT INTO
    plan_intervals (
        plan_id,
        name,
        description,
        duration,
        "order"
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, plan_id, name, description, duration, "order", created_at, updated_at
`

type PlanIntervals_CreateOneParams struct {
	PlanID      int64
	Name        pgtype.Text
	Description pgtype.Text
	Duration    pgtype.Interval
	Order       int32
}

func (q *Queries) PlanIntervals_CreateOne(ctx context.Context, arg PlanIntervals_CreateOneParams) (PlanInterval, error) {
	row := q.db.QueryRow(ctx, planIntervals_CreateOne,
		arg.PlanID,
		arg.Name,
		arg.Description,
		arg.Duration,
		arg.Order,
	)
	var i PlanInterval
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.Name,
		&i.Description,
		&i.Duration,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const planIntervals_DeleteById = `-- name: PlanIntervals_DeleteById :one
DELETE FROM plan_intervals WHERE id = $1 RETURNING id, plan_id, name, description, duration, "order", created_at, updated_at
`

func (q *Queries) PlanIntervals_DeleteById(ctx context.Context, id int64) (PlanInterval, error) {
	row := q.db.QueryRow(ctx, planIntervals_DeleteById, id)
	var i PlanInterval
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.Name,
		&i.Description,
		&i.Duration,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const planIntervals_List = `-- name: PlanIntervals_List :many
SELECT 
    pi.id, pi.plan_id, pi.name, pi.description, pi.duration, pi."order", pi.created_at, pi.updated_at,
    COALESCE(group_counts.count, 0) AS group_count
FROM plan_intervals pi
LEFT JOIN (
    SELECT 
        plan_interval_id, 
        COUNT(DISTINCT group_id) AS count
    FROM interval_group_assignments
    GROUP BY plan_interval_id
) AS group_counts ON pi.id = group_counts.plan_interval_id
WHERE
    (pi.plan_id = $1 OR $2 = 0) -- Filter by plan_id if provided (non-zero)
    AND (pi.id = $3 OR $4 = 0) -- Filter by interval_id if provided (non-zero)
ORDER BY pi."order"
LIMIT $5
`

type PlanIntervals_ListParams struct {
	PlanID  int64
	Column2 interface{}
	ID      int64
	Column4 interface{}
	Limit   int32
}

type PlanIntervals_ListRow struct {
	ID          int64
	PlanID      int64
	Name        pgtype.Text
	Description pgtype.Text
	Duration    pgtype.Interval
	Order       int32
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	GroupCount  int64
}

func (q *Queries) PlanIntervals_List(ctx context.Context, arg PlanIntervals_ListParams) ([]PlanIntervals_ListRow, error) {
	rows, err := q.db.Query(ctx, planIntervals_List,
		arg.PlanID,
		arg.Column2,
		arg.ID,
		arg.Column4,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlanIntervals_ListRow
	for rows.Next() {
		var i PlanIntervals_ListRow
		if err := rows.Scan(
			&i.ID,
			&i.PlanID,
			&i.Name,
			&i.Description,
			&i.Duration,
			&i.Order,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const planIntervals_UpdateOrderByValues = `-- name: PlanIntervals_UpdateOrderByValues :many
UPDATE plan_intervals as p_i
SET
    "order" = v.new_orders[array_position(v.ids, p_i.id)]
FROM (
        VALUES (
                $1::bigint[], $2::int[]
            )
    ) AS v (ids, new_orders)
WHERE
    p_i.id = ANY (v.ids)
RETURNING
    id, plan_id, name, description, duration, "order", created_at, updated_at
`

type PlanIntervals_UpdateOrderByValuesParams struct {
	IntervalIds []int64
	NewOrders   []int32
}

func (q *Queries) PlanIntervals_UpdateOrderByValues(ctx context.Context, arg PlanIntervals_UpdateOrderByValuesParams) ([]PlanInterval, error) {
	rows, err := q.db.Query(ctx, planIntervals_UpdateOrderByValues, arg.IntervalIds, arg.NewOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlanInterval
	for rows.Next() {
		var i PlanInterval
		if err := rows.Scan(
			&i.ID,
			&i.PlanID,
			&i.Name,
			&i.Description,
			&i.Duration,
			&i.Order,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
