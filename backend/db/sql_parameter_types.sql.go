// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sql_parameter_types.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const parameterTypes_CreateOne = `-- name: ParameterTypes_CreateOne :one
INSERT INTO
    parameter_types (
        name,
        data_type,
        default_unit,
        min_value,
        max_value
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, data_type, default_unit, min_value, max_value
`

type ParameterTypes_CreateOneParams struct {
	Name        string
	DataType    string
	DefaultUnit string
	MinValue    pgtype.Float8
	MaxValue    pgtype.Float8
}

func (q *Queries) ParameterTypes_CreateOne(ctx context.Context, arg ParameterTypes_CreateOneParams) (ParameterType, error) {
	row := q.db.QueryRow(ctx, parameterTypes_CreateOne,
		arg.Name,
		arg.DataType,
		arg.DefaultUnit,
		arg.MinValue,
		arg.MaxValue,
	)
	var i ParameterType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DataType,
		&i.DefaultUnit,
		&i.MinValue,
		&i.MaxValue,
	)
	return i, err
}

const parameterTypes_GetById = `-- name: ParameterTypes_GetById :one
SELECT id, name, data_type, default_unit, min_value, max_value FROM parameter_types WHERE id = $1
`

func (q *Queries) ParameterTypes_GetById(ctx context.Context, id int64) (ParameterType, error) {
	row := q.db.QueryRow(ctx, parameterTypes_GetById, id)
	var i ParameterType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DataType,
		&i.DefaultUnit,
		&i.MinValue,
		&i.MaxValue,
	)
	return i, err
}

const parameterTypes_List = `-- name: ParameterTypes_List :many
SELECT DISTINCT parameter_types.id, parameter_types.name, parameter_types.data_type, parameter_types.default_unit, parameter_types.min_value, parameter_types.max_value FROM parameter_types 
LEFT JOIN user_parameter_types on parameter_types.id = user_parameter_types.parameter_type_id
WHERE (user_parameter_types.user_id = $1::BIGINT OR user_parameter_types.user_id IS NULL OR $1::bigint = 0)
AND (parameter_types.id = $2::BIGINT or $2::bigint = 0)
ORDER BY parameter_types.name DESC
LIMIT $4::int
OFFSET $3::int
`

type ParameterTypes_ListParams struct {
	UserID          int64
	ParameterTypeID int64
	Offset          int32
	Limit           int32
}

func (q *Queries) ParameterTypes_List(ctx context.Context, arg ParameterTypes_ListParams) ([]ParameterType, error) {
	rows, err := q.db.Query(ctx, parameterTypes_List,
		arg.UserID,
		arg.ParameterTypeID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParameterType
	for rows.Next() {
		var i ParameterType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DataType,
			&i.DefaultUnit,
			&i.MinValue,
			&i.MaxValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
