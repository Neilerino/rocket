// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sql_parameter_types.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const parameterTypes_CreateOne = `-- name: ParameterTypes_CreateOne :one
INSERT INTO
    parameter_types (
        name,
        data_type,
        default_unit,
        min_value,
        max_value
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, data_type, default_unit, min_value, max_value
`

type ParameterTypes_CreateOneParams struct {
	Name        string
	DataType    string
	DefaultUnit string
	MinValue    pgtype.Float8
	MaxValue    pgtype.Float8
}

func (q *Queries) ParameterTypes_CreateOne(ctx context.Context, arg ParameterTypes_CreateOneParams) (ParameterType, error) {
	row := q.db.QueryRow(ctx, parameterTypes_CreateOne,
		arg.Name,
		arg.DataType,
		arg.DefaultUnit,
		arg.MinValue,
		arg.MaxValue,
	)
	var i ParameterType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DataType,
		&i.DefaultUnit,
		&i.MinValue,
		&i.MaxValue,
	)
	return i, err
}

const parameterTypes_GetById = `-- name: ParameterTypes_GetById :one
SELECT id, name, data_type, default_unit, min_value, max_value FROM parameter_types WHERE id = $1
`

func (q *Queries) ParameterTypes_GetById(ctx context.Context, id int64) (ParameterType, error) {
	row := q.db.QueryRow(ctx, parameterTypes_GetById, id)
	var i ParameterType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DataType,
		&i.DefaultUnit,
		&i.MinValue,
		&i.MaxValue,
	)
	return i, err
}
