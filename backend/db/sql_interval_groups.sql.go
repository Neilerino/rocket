// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sql_interval_groups.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const intervalGroupAssignments_Create = `-- name: IntervalGroupAssignments_Create :one
INSERT INTO
    interval_group_assignments (
        plan_interval_id,
        group_id,
        frequency
    )
VALUES ($1, $2, $3) RETURNING id, plan_interval_id, group_id, frequency
`

type IntervalGroupAssignments_CreateParams struct {
	PlanIntervalID int64
	GroupID        int64
	Frequency      int32
}

func (q *Queries) IntervalGroupAssignments_Create(ctx context.Context, arg IntervalGroupAssignments_CreateParams) (IntervalGroupAssignment, error) {
	row := q.db.QueryRow(ctx, intervalGroupAssignments_Create, arg.PlanIntervalID, arg.GroupID, arg.Frequency)
	var i IntervalGroupAssignment
	err := row.Scan(
		&i.ID,
		&i.PlanIntervalID,
		&i.GroupID,
		&i.Frequency,
	)
	return i, err
}

const intervalGroupAssignments_Delete = `-- name: IntervalGroupAssignments_Delete :exec
DELETE FROM interval_group_assignments
WHERE
    plan_interval_id = $1
    AND group_id = $2
`

type IntervalGroupAssignments_DeleteParams struct {
	PlanIntervalID int64
	GroupID        int64
}

func (q *Queries) IntervalGroupAssignments_Delete(ctx context.Context, arg IntervalGroupAssignments_DeleteParams) error {
	_, err := q.db.Exec(ctx, intervalGroupAssignments_Delete, arg.PlanIntervalID, arg.GroupID)
	return err
}

const intervalGroupAssignments_GetByGroupId = `-- name: IntervalGroupAssignments_GetByGroupId :many
SELECT
    iga.id, iga.plan_interval_id, iga.group_id, iga.frequency,
    pi.id as pi_id,
    pi.plan_id as pi_plan_id,
    pi.name as pi_name,
    pi.duration as pi_duration,
    pi.order as pi_order,
    pi.created_at as pi_created_at,
    pi.updated_at as pi_updated_at
FROM
    interval_group_assignments iga
    JOIN plan_intervals pi ON pi.id = iga.plan_interval_id
WHERE
    iga.group_id = $1
`

type IntervalGroupAssignments_GetByGroupIdRow struct {
	ID             int64
	PlanIntervalID int64
	GroupID        int64
	Frequency      int32
	PiID           int64
	PiPlanID       int64
	PiName         pgtype.Text
	PiDuration     pgtype.Interval
	PiOrder        int32
	PiCreatedAt    pgtype.Timestamp
	PiUpdatedAt    pgtype.Timestamp
}

func (q *Queries) IntervalGroupAssignments_GetByGroupId(ctx context.Context, groupID int64) ([]IntervalGroupAssignments_GetByGroupIdRow, error) {
	rows, err := q.db.Query(ctx, intervalGroupAssignments_GetByGroupId, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IntervalGroupAssignments_GetByGroupIdRow
	for rows.Next() {
		var i IntervalGroupAssignments_GetByGroupIdRow
		if err := rows.Scan(
			&i.ID,
			&i.PlanIntervalID,
			&i.GroupID,
			&i.Frequency,
			&i.PiID,
			&i.PiPlanID,
			&i.PiName,
			&i.PiDuration,
			&i.PiOrder,
			&i.PiCreatedAt,
			&i.PiUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const intervalGroupAssignments_GetByIntervalId = `-- name: IntervalGroupAssignments_GetByIntervalId :many
SELECT
    iga.id, iga.plan_interval_id, iga.group_id, iga.frequency,
    g.id as g_id,
    g.name as g_name,
    g.description as g_description,
    g.user_id as g_user_id,
    g.created_at as g_created_at,
    g.updated_at as g_updated_at
FROM
    interval_group_assignments iga
    JOIN groups g ON g.id = iga.group_id
WHERE
    iga.plan_interval_id = $1
`

type IntervalGroupAssignments_GetByIntervalIdRow struct {
	ID             int64
	PlanIntervalID int64
	GroupID        int64
	Frequency      int32
	GID            int64
	GName          string
	GDescription   string
	GUserID        int64
	GCreatedAt     pgtype.Timestamp
	GUpdatedAt     pgtype.Timestamp
}

func (q *Queries) IntervalGroupAssignments_GetByIntervalId(ctx context.Context, planIntervalID int64) ([]IntervalGroupAssignments_GetByIntervalIdRow, error) {
	rows, err := q.db.Query(ctx, intervalGroupAssignments_GetByIntervalId, planIntervalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IntervalGroupAssignments_GetByIntervalIdRow
	for rows.Next() {
		var i IntervalGroupAssignments_GetByIntervalIdRow
		if err := rows.Scan(
			&i.ID,
			&i.PlanIntervalID,
			&i.GroupID,
			&i.Frequency,
			&i.GID,
			&i.GName,
			&i.GDescription,
			&i.GUserID,
			&i.GCreatedAt,
			&i.GUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
